/*
 * Receipt Processor
 *
 * A simple receipt processor
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using FetchDevSample.Models;
using System.Xml.Linq;
using System.Diagnostics.Metrics;
using System.Globalization;
using FetchDevSample.Calculators;

namespace FetchDevSample.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Receipt : IEquatable<Receipt>
    {
        /// <summary>
        /// The name of the retailer or store the receipt is from.
        /// </summary>
        /// <value>The name of the retailer or store the receipt is from.</value>
        [Required]
        [RegularExpression("^\\S+$", ErrorMessage = "Invalid retailer name")]
        [DataMember(Name = "retailer")]
        public string Retailer { get; set; }

        /// <summary>
        /// The date of the purchase printed on the receipt.
        /// </summary>
        /// <value>The date of the purchase printed on the receipt.</value>
        [Required]

        [DataMember(Name = "purchaseDate")]
        public DateTime PurchaseDate { get; set; }

        /// <summary>
        /// The time of the purchase printed on the receipt. 24-hour time expected.
        /// </summary>
        /// <value>The time of the purchase printed on the receipt. 24-hour time expected.</value>
        [Required]

        [DataMember(Name = "purchaseTime")]
        public string PurchaseTime { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [Required]

        [DataMember(Name = "items")]
        public List<Item> Items { get; set; }

        /// <summary>
        /// The total amount paid on the receipt.
        /// </summary>
        /// <value>The total amount paid on the receipt.</value>
        [Required]
        [RegularExpression("^\\d+\\.\\d{2}$", ErrorMessage = "Invalid total price")]
        [DataMember(Name = "total")]
        public string Total { get; set; }

        /// <summary>
        /// Specifies and calculates the points earned by this receipt.
        /// </summary>
        /// <value>The point total for this receipt.</value>
        public long CalculatePoints()
        {
            IPointsCalculator[] calcs = new IPointsCalculator[] {
                new RetailerNameCalculator(),
                new CostCalculator(),
                new ItemDescriptionCalculator(),
                new ItemsOnReceiptCalculator(),
                new DateCalculator()
                //new OpenAIDateTimeCalculator()
            };

            return calcs.Sum(calc => calc.CalculatePoints(this));
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  Retailer: ").Append(Retailer).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  PurchaseTime: ").Append(PurchaseTime).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Receipt)obj);
        }

        /// <summary>
        /// Returns true if Receipt instances are equal
        /// </summary>
        /// <param name="other">Instance of Receipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Receipt other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Retailer == other.Retailer ||
                    Retailer != null &&
                    Retailer.Equals(other.Retailer)
                ) &&
                (
                    PurchaseDate == other.PurchaseDate ||
                    PurchaseDate != null &&
                    PurchaseDate.Equals(other.PurchaseDate)
                ) &&
                (
                    PurchaseTime == other.PurchaseTime ||
                    PurchaseTime != null &&
                    PurchaseTime.Equals(other.PurchaseTime)
                ) &&
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                ) &&
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Retailer != null)
                    hashCode = hashCode * 59 + Retailer.GetHashCode();
                if (PurchaseDate != null)
                    hashCode = hashCode * 59 + PurchaseDate.GetHashCode();
                if (PurchaseTime != null)
                    hashCode = hashCode * 59 + PurchaseTime.GetHashCode();
                if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Receipt left, Receipt right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Receipt left, Receipt right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
